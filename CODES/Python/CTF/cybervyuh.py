from fpylll import IntegerMatrix, LLL
from Crypto.Util.number import long_to_bytes, inverse, GCD

q = 118782806870790459877276946144534340459070276298147139413034770491543505960286655401975985304720134389194848276366937767931814930100040579383431258523071322802488365288182549512083935086200116831560554704160682669413672809274976929538511753754624910540004274848919618576618469494826512960106161782121150998263
h = 25473748602172716217323377502293735360476598685950701141218238675886715542712499286192289401073765275784785679678342729251134933091712208422172373546295458497851984370522852288928100340491754417322895436201334085906926323804660279481651724780922432451616022829468200469083544530000782893494326532297173802238
e = 34963993283511293547063333294941000231429209341161023652037537757573244023372392985066441803391679270951631633606004819272904762713143945564988378517025552064134260354064796308229964189369070891208089310672819068205082794924269757716840764888524756585160076900371457337288547081546893438482082138367328168427

# Construct the lattice matrix
M = IntegerMatrix(2, 2)
M[0, 0] = q
M[0, 1] = 0
M[1, 0] = -h
M[1, 1] = 1

# Run LLL reduction
M_reduced = LLL.reduction(M)

f_candidate = M_reduced[0, 0]
g_candidate = M_reduced[0, 1]

print(f"Candidate f: {f_candidate}")
print(f"Candidate g: {g_candidate}")

k = GCD(f_candidate, g_candidate)
f = f_candidate // k
g = g_candidate // k

print(f"Recovered f: {f}")
print(f"Recovered g: {g}")

a = (f * e) % q
f_inv_mod_g = inverse(f, g)
m = (a * f_inv_mod_g) % g

flag_bytes = long_to_bytes(m)
print("Decrypted Flag:", flag_bytes.decode())
